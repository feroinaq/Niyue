1. Удалитб рош *
2. Генерация картинок?
3. Музыка? 
4. dev режим *
5. Поставить на хост?
6. Голосование *




























































class Confirm(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.value = Optional[bool]
        
    @disnake.ui.button(label="Патчноут", style=disnake.ButtonStyle.blurple, emoji="☑️")
    async def confirm(self, button: disnake.ui.Button, inter: disnake.CommandInteraction):
        await inter.response.send_message("Ссылку на патчноут")
        self.value = True
        self.stop()


class Link(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(disnake.ui.Button(label="Список изменений", url="https://telegra.ph/Spisok-izmenenij-niyue-02-18"))




embed = disnake.Embed(
        title="ГЛОБАЛЬНОЕ ОБНОВЛЕНИЕ 2.0.0!",
        description="Бот niyue обновлена до версии 2.0.0 \n Новые команды оптимизации, обновление токена и, главное, возможность общения с ботом! \n Подробнее ознакомится с изменениями можно в патчноуте ниже",
        color=0x8a2be2
    ) 
    embed.set_image(url="https://lyl.su/ZQ1s")
    await channel.send(embed=embed)
    view = Confirm()
    
    await channel.send(view=view)
    await view.wait()
     
    if view.value is True:
        await channel.send(view=Link())





жжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж
жжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж
жжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж
жжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж

import disnake
from disnake.ext import commands
import yt_dlp as youtube_dl
import asyncio
import os

intents = disnake.Intents.default()
bot = commands.Bot(command_prefix="/", intents=intents)

# Хранилище для текущего голосового канала и потока
current_voice_channel = None
current_audio_source = None
voice_clients = {}

# Папка для скачанных файлов
DOWNLOADS_PATH = "downloads"

# Убедитесь, что папка существует
if not os.path.exists(DOWNLOADS_PATH):
    os.makedirs(DOWNLOADS_PATH)

# Опции для скачивания и получения аудио с YouTube
def get_ydl_opts():
    return {
        'format': 'bestaudio/best',
        'extractaudio': True,
        'audioquality': 1,
        'outtmpl': f'{DOWNLOADS_PATH}/%(id)s.%(ext)s',
        'restrictfilenames': True,
        'noplaylist': True,
        'quiet': True,
        'logtostderr': False,
        'postprocessors': [{
            'key': 'FFmpegAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
    }

# Получение аудио с YouTube
async def get_audio_source(url):
    try:
        with youtube_dl.YoutubeDL(get_ydl_opts()) as ydl:
            info = ydl.extract_info(url, download=False)
            audio_url = info['formats'][0]['url']
            return audio_url
    except Exception as e:
        print(f"Ошибка при извлечении аудио: {e}")
        return None

# Подключение к голосовому каналу
async def connect_to_voice_channel(ctx):
    global current_voice_channel
    channel = ctx.author.voice.channel
    if current_voice_channel != channel:
        current_voice_channel = channel
        voice_client = await channel.connect()
        return voice_client
    return voice_clients.get(channel.id)

# Отключение от голосового канала
async def disconnect_from_voice_channel(ctx):
    global current_voice_channel
    if current_voice_channel:
        voice_client = voice_clients.get(current_voice_channel.id)
        if voice_client:
            await voice_client.disconnect()
            voice_clients.pop(current_voice_channel.id, None)
        current_voice_channel = None

# Воспроизведение аудио
async def play_audio(ctx, url):
    voice_client = await connect_to_voice_channel(ctx)
    
    if not voice_client:
        return await ctx.send("Не удалось подключиться к голосовому каналу.")
    
    audio_source = await get_audio_source(url)
    if not audio_source:
        return await ctx.send("Не удалось получить аудио с YouTube.")
    
    if voice_client.is_playing():
        await ctx.send("Уже проигрывается музыка.")
        return
    
    audio = disnake.FFmpegPCMAudio(audio_source)
    voice_client.play(audio, after=lambda e: print(f"Проигрывание завершено: {e}"))
    await ctx.send(f"Сейчас проигрывается музыка: {url}")

# Команда /play для воспроизведения музыки
@bot.slash_command(name="play", description="Воспроизведение музыки с YouTube")
async def play(ctx, url: str):
    await play_audio(ctx, url)

# Команда /stop для остановки воспроизведения
@bot.slash_command(name="stop", description="Остановка музыки")
async def stop(ctx):
    global current_voice_channel
    if current_voice_channel:
        voice_client = voice_clients.get(current_voice_channel.id)
        if voice_client and voice_client.is_playing():
            voice_client.stop()
            await disconnect_from_voice_channel(ctx)
            await ctx.send("Музыка остановлена и я отключился от канала.")
        else:
            await ctx.send("В данный момент музыка не проигрывается.")
    else:
        await ctx.send("Я не подключен к голосовому каналу.")

# Команда /pause для приостановки музыки
@bot.slash_command(name="pause", description="Пауза музыки")
async def pause(ctx):
    global current_voice_channel
    if current_voice_channel:
        voice_client = voice_clients.get(current_voice_channel.id)
        if voice_client and voice_client.is_playing():
            voice_client.pause()
            await ctx.send("Музыка поставлена на паузу.")
        else:
            await ctx.send("В данный момент музыка не воспроизводится.")
    else:
        await ctx.send("Я не подключен к голосовому каналу.")

# Команда /resume для продолжения музыки
@bot.slash_command(name="resume", description="Продолжение музыки")
async def resume(ctx):
    global current_voice_channel
    if current_voice_channel:
        voice_client = voice_clients.get(current_voice_channel.id)
        if voice_client and voice_client.is_paused():
            voice_client.resume()
            await ctx.send("Музыка возобновлена.")
        else:
            await ctx.send("Музыка не была на паузе.")
    else:
        await ctx.send("Я не подключен к голосовому каналу.")

































